#!/usr/bin/env python3
"""Check home directory for unwanted configuration files."""
import argparse
import datetime
import enum
import os
import pathlib
import shutil
import stat
import sys
from typing import Optional, Sequence

from termcolor import colored


def parse_args(argv = None):
    """Parse command-line arguments.

    Args:
        argv: A list of argument strings to use instead of sys.argv.

    Returns:
        An `argparse.Namespace` object containing the parsed arguments.
    """
    parser = argparse.ArgumentParser(
        description=__doc__.splitlines()[0] if __doc__ else None,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    return parser.parse_args(argv)


class Status(enum.Enum):
    APPROVED = 1
    APPROVED_SYMLINK = 2  # Approved iff it is a symbolic link
    TOLERATED = 3
    TOLERATED_SYMLINK = 4  # Tolerated iff it is a symbolic link
    TO_INVESTIGATE = 5
    REMOVE = 6  # Delete on sight
    FIXED = 7  # Supposedly fixed (upstream, env var, etc); check config if appears
    UNKNOWN = 8


# NOTE:
# It is possible to watch for file creation in $HOME with the following command:
# inotifywait -m -e create ~/

KNOWN_FILES = {
    ".arduino15": Status.TOLERATED_SYMLINK,  # https://github.com/arduino/Arduino/issues/3915
    ".bash_profile": Status.TOLERATED_SYMLINK,
    ".bashrc": Status.TOLERATED_SYMLINK,
    ".bean-shell-history": Status.REMOVE,  # Beancount
    ".cache": Status.APPROVED,
    ".config": Status.APPROVED,
    ".duplicacy": Status.TOLERATED,
    ".duplicacy-web": Status.TOLERATED_SYMLINK,
    ".ecryptfs": Status.APPROVED,
    ".elinks": Status.TO_INVESTIGATE,  # Possible to relocate with env var
    ".factorio": Status.TOLERATED_SYMLINK,
    ".ghc": Status.REMOVE,
    ".gradle": Status.FIXED,
    ".grip": Status.FIXED,  # Fixed with env var
    ".java": Status.TO_INVESTIGATE,  # Possible to relocate with env var
    ".jssc": Status.TOLERATED_SYMLINK,  # https://github.com/arduino/Arduino/issues/3915
    ".keras": Status.REMOVE,  # https://github.com/keras-team/keras/issues/14186
    ".klei": Status.TOLERATED_SYMLINK,
    ".lldb": Status.REMOVE,
    ".local": Status.APPROVED,
    ".mono": Status.TO_INVESTIGATE,
    ".mozilla": Status.TOLERATED_SYMLINK,
    ".oracle_jre_usage": Status.REMOVE,
    ".Osmos": Status.TOLERATED_SYMLINK,
    ".pam_environment": Status.APPROVED_SYMLINK,
    ".paradoxlauncher": Status.TOLERATED_SYMLINK,
    ".pki": Status.TO_INVESTIGATE,  # Supposedly fixed but keeps reappearing. Delete OK
    ".Private": Status.APPROVED,
    ".profile": Status.APPROVED_SYMLINK,
    ".pulse-cookie": Status.TO_INVESTIGATE,  # Config ignored? See man pulse-client.conf
    ".ssh": Status.APPROVED,
    ".steam": Status.TOLERATED,
    ".SteamCloud": Status.TO_INVESTIGATE,
    ".steampath": Status.TOLERATED_SYMLINK,
    ".steampid": Status.TOLERATED_SYMLINK,
    ".thumbnails": Status.TO_INVESTIGATE,  # I can't figure out what's making this
    ".thunderbird": Status.TOLERATED_SYMLINK,
    ".Xauthority": Status.TOLERATED,  # XAUTHORITY breaks lightdm. Maybe make SYMLINK?
    ".xournalpp": Status.REMOVE,  # https://github.com/xournalpp/xournalpp/pull/1384
    ".xprofile": Status.APPROVED_SYMLINK,
    ".Xresources": Status.APPROVED_SYMLINK,
    ".zotero": Status.TOLERATED_SYMLINK,
}


def main(argv = None):
    """Run script.

    Args:
        argv: A list of argument strings to use instead of sys.argv.
    """
    args = parse_args(argv)
    del args

    home = pathlib.Path.home()
    for file in sorted(home.iterdir(), key=lambda f: f.name.casefold()):
        name = file.name
        if not name.startswith("."):
            continue
        status = KNOWN_FILES.get(name, Status.UNKNOWN)
        extras = []

        if status == Status.APPROVED:
            status_str = "OK"
        elif status == Status.APPROVED_SYMLINK:
            if file.is_symlink():
                status_str = "OK"
            else:
                status_str = "not symlink"
        elif status == Status.TOLERATED:
            status_str = "tolerated"
        elif status == Status.TOLERATED_SYMLINK:
            if file.is_symlink():
                status_str = "tolerated symlink"
            else:
                status_str = "not symlink"
        elif status == Status.TO_INVESTIGATE:
            status_str = "investigation required"
        elif status == Status.REMOVE:
            status_str = "remove"
        elif status == Status.FIXED:
            status_str = "fixed?"
        elif status == Status.UNKNOWN:
            status_str = "unknown"
        else:
            assert False, "Invalid status"

        if status in (Status.UNKNOWN, status.TO_INVESTIGATE):
            try:
                last_modified_time = datetime.datetime.fromtimestamp(
                    os.stat(file)[stat.ST_MTIME]
                )
                extras.append("[{}]".format(last_modified_time))
            except KeyError:
                pass

        status_colour = {
            "investigation required": "yellow",
            "not symlink": "red",
            "OK": "green",
            "remove": "red",
            "tolerated symlink": "green",
            "tolerated": "green",
            "fixed?": "red",
            "unknown": "magenta",
        }[status_str]
        print(name, ":", colored(status_str, status_colour), *extras)


if __name__ == "__main__":
    try:
        _np = sys.modules["numpy"]
    except KeyError:
        pass
    else:
        _np.set_printoptions(  # type: ignore
            linewidth=shutil.get_terminal_size().columns
        )
    main()
